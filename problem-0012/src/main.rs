// Triangular numbers can be generated by sigma(n) = n(n+1)/2
// Number of factors of n can be calculated by combination of the prime
// factors - this means if n = x^a * y^b * z^z then the number of factors
// will be (a+1)(b+1)(c+1)
// The total number of factors of sigma(n) will be the number of factors of
// n multiplied by the number of factors on (n+1)

fn num_divisors(num: u32) -> u32 {
    let mut divisors = 1;
    let mut num = num;
    if num % 2 == 0 {
        num /= 2;
    }

    let mut count = 0;
    while num % 2 == 0 {
        count += 1;
        num /= 2;
    }

    divisors = divisors * (count+1);

    let mut i = 3;
    while num > 1 {
        count = 0;
        while num % i == 0 {
            count += 1;
            num /= i;
        }
        divisors = divisors * (count+1);
        i += 2;
    }

    return divisors;
}

fn main() {
    let mut num = 1;
    loop {
        num += 1;
        println!("Processing {}", num);

        let left = num;
        let right = num+1;

        let num_left = num_divisors(left);
        let num_right = num_divisors(right);
        let factor_count = num_left * num_right;

        if factor_count > 500 {
            println!("{} has {} factors", (left*right/2), factor_count);
            break;
        }
    }
}
